setClass("seed",
slot = c(roots = "roots",
measures = "measures",
origin = "origin",
parameters = "parameters",
models = "models",
retain = "retain",
dropped = "dropped",
meta.data = "data.frame",
time = "vector")
)
################################################################################
############################     lighteR      ##################################
################################################################################
### Objects
setClass("roots",
slot = c(Image = "data.frame",
Zone = "data.frame")
)
setClass("chloroplast",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("leaves",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("models",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("parameters",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("retain",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("dropped",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("seed",
slot = c(roots = "roots",
chloroplast = "chloroplast",
leaves = "leaves",
parameters = "parameters",
models = "models",
retain = "retain",
dropped = "dropped",
meta.data = "data.frame",
time = "vector")
)
## Class Union for Genomic Profile internal
setClassUnion("GRList",c("CompressedGRangesList","list","GRanges"))
setClassUnion("nos",c("numeric","character"))
# apparently PFM does not come up so we will try this
# this works dont know why though
# do not touch this
utils::globalVariables("PFM")
## Genomic Profile Parameters
setClass("genomicProfilesInternal",
slots = c(PWM = "matrix",
PFM = "matrix",
PFMFormat = "character",
BPFrequency = "vector",
minPWMScore = "vector",
maxPWMScore = "vector",
profiles = "GRList",
DNASequenceLength = "vector",
averageExpPWMScore = "vector",
ZeroBackground = "vector",
drop="vector",
tags="character"),
prototype = prototype(PFMFormat="raw",
BPFrequency = rep(0.25,4),
tags="empty"),
validity= function(object){
if(length(object@PFM) < 1 &
length(object@PWM) > 0 &
all(object@PWM >= 0)){
stop("Genomic Profile Parameters Validation:
PWM does not seem to be a Position Weight Matrix.")
}
if(all(object@PFMFormat %in% c("raw","transfac","JASPAR","sequences","matrix"))
==FALSE ){
stop("Genomic Profile Parameters Validation:
PFM file is not one of the following formats:
raw,transfac,JASPAR,sequences or matrix.")
}
return(TRUE)
}
)
################################################################################
############################     lighteR      ##################################
################################################################################
### Objects
setClass("roots",
slot = c(Image = "data.frame",
Zone = "data.frame")
)
setClass("chloroplast",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("leaves",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("models",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("parameters",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("retain",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("dropped",
slot = c(NPQ = "data.frame",
XE = "data.frame",
OE = "data.frame",
EF = "data.frame")
)
setClass("seed",
slot = c(roots = "roots",
chloroplast = "chloroplast",
leaves = "leaves",
parameters = "parameters",
models = "models",
retain = "retain",
dropped = "dropped",
meta.data = "data.frame",
time = "vector")
)
new(seed)
new("seed")
str(new("seed"))
getwd()
list.dirs()
getwd()
list.files()
list.dirs()
list.dirs(recursive = F)
list.files()
file.exists()
file.exists("DESCRIPTION")
file.exists("R")
dir.exists("R")
dir.exists("DESCRIPTION")
################################################################################
############################     lighteR      ##################################
################################################################################
## s3 class instead of s4
roots <- list("Image"=NULL,"Zone" = NULL)
class(roots) <- "roots"
chloroplast <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(chloroplast) <- "chloroplast"
leaves <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(leaves) <- "leaves"
parameters <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(parameters) <- "parameters"
models <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(models) <- "models"
retain <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(retain) <- "retain"
dropped <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(dropped) <- "dropped"
setClass("seed",
slot = c(roots = "roots",
chloroplast = "chloroplast",
leaves = "leaves",
parameters = "parameters",
models = "models",
retain = "retain",
dropped = "dropped",
meta.data = "data.frame",
time = "vector")
)
sowSeed <- function(files, type = c("image","zone")){
currentDir <- getwd()
if(dir.exists(files)){
roots <- batchLoading(files)
}
}
rm(list = ls())
new("seed")
getwd()
source("R/loading.R")
source("R/ExportAndFormat.R")
################################################################################
############################     lighteR      ##################################
################################################################################
## s3 class instead of s4
roots <- list("Image"=NULL,"Zone" = NULL)
class(roots) <- "roots"
chloroplast <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(chloroplast) <- "chloroplast"
leaves <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(leaves) <- "leaves"
parameters <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(parameters) <- "parameters"
models <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(models) <- "models"
retain <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(retain) <- "retain"
dropped <- list("NPQ" = NULL,
"XE" = NULL,
"OE" = NULL,
"EF" = NULL)
class(dropped) <- "dropped"
setClass("seed",
slot = c(roots = "roots",
chloroplast = "chloroplast",
leaves = "leaves",
parameters = "parameters",
models = "models",
retain = "retain",
dropped = "dropped",
meta.data = "data.frame",
time = "vector")
)
sowSeed <- function(files,mapID = NULL,type = c("all","image","zone"), areaThreshold = 5){
## Start by build object
seed <- new("seed")
## Adding roots
seed@roots <- .rooting(data = files,
mapID = mapID,
type = type,
areaThreshold =areaThreshold)
return(seed)
}
sowSeed()
source("R/loading.R")
ls()
source("R/loading.R")
source("R/loading.R")
sowSeed()
dats <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/"
maps <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/map_ID/"
sowSeed(dats,maps)
source("R/loading.R")
sowSeed(dats,maps)
source("R/loading.R")
sowSeed(dats,maps)
traceback()
source("R/loading.R")
sowSeed(dats,maps)
sowSeed(dats,maps) -> test
str(test)
length(test@roots)
names(test@roots)
names(test@roots$Image)
names(test@roots$Zone)
fi <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/030519_plate1_AllImages_ZoneData.csv"
ma <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/map_ID/080519_plate1_mapID.csv"
fi <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/080519_plate1_AllImages_ZoneData.csv"
test2 <- sowSeed(fi,ma)
traceback()
test2 <- sowSeed(fi,ma,type="zone")
code <- dir("R")
for(i in code)source(paste0("R/"code))
for(i in code)source(paste0("R/",code))
code
for(i in code)source(paste0("R/",i))
ls()
setwd("R")
code <- dir()
for( i in code) source(i)
test2<- sowSeed(fi,ma)
test2<- sowSeed(fi,ma,type = )
source("loading.R")
test2<- sowSeed(fi,ma)
source("loading.R")
test2<- sowSeed(fi,ma)
type
type <- c("image","zone")
grepl("zone", type)
source("loading.R")
test2<- sowSeed(fi,ma)
source("loading.R")
test2<- sowSeed(fi,ma)
type
source("loading.R")
test2<- sowSeed(fi,ma)
source("seed.R")
source("seed.R")
test2<- sowSeed(fi,ma)
sowSeed(dats,maps) -> test
test
str(test)
test@roots@roots
test@roots
test@roots@Image
test@roots@
str(test@roots)
names(test@roots)
test@roots$Image
test@roots$Zone
source("seed.R")
source("loading.R")
test <- sowSeed(dats,maps)
test@roots$I
test@roots$Image
test@roots
test@roots@Image
test@roots@Zone
dats
dir(dats)
source("loading.R")
test <- sowSeed(dats,maps)
zoneFiles
dataLocal
zoneFiles
directory
directory
dir(directory)
mapID
mapID<-lapply(zoneFiles,.matchMapToData,map=mapIDLocal,dataLoc=directory)
mapID
zone<-mapply(function(zoneFiles,mapID,threshold){
mapID<-.nullConversion(mapID)
zoneData <-.ZoneDataLoading(zoneFiles,mapID,threshold)
#error=function(cond){
#     return("Plate Error - Check for salavaging \n")
#    },
#warning=function(cond){
#     return("Plate Error - Check for salavaging \n")
#    })
return(zoneData)},zoneFiles=zoneFiles,mapID=mapID,threshold=threshold,SIMPLIFY=F)
source("loading.R")
test <- sowSeed(dats,maps)
source("functions.R")
dir()
source("functions.R")
test <- sowSeed(dats,maps)
