for(i in food){
expe <- expense[grep(i,expense$Text),"Amount"]
total <- c(total,sum(expe))
}
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
food <- c("Fakta","Meny","Netto")
total <- c()
for(i in food){
expe <- expense[grep(i,expense$Text),"Amount"]
total <- c(total,sum(expe))
}
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
food <- c("Fakta","Meny","Netto")
total <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text),"Amount"]))
total <- c(total,sum(expe))
}
expense$Text
grep("MENY",expense$Text)
food <- c("Fakta","Meny","Netto")
total <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
total <- c(total,sum(expe))
}
total
sum(total)
View(expense)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F)
uk
expense
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
uk
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("(£","",ukexp)
ukexp <- gsub(")", "", ukexp)
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\(£","",ukexp)
ukexp <- gsub("\)", "", ukexp)
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
total
old
sum(total)
sum(old)
3451.11+1265.55+374.12
3451.11+1265.55+374.12+60
3451.11+1265.55+374.12
3451.11+1265.55+374.12+3714.53+2252.77+253.26
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto","Irma")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
total
old
expense
expense$Text
grep("Fakta",expense$Text, value = T)
old
sum(old)
total
last
uk
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto","Irma")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
print(sum(expe))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
print(sum(olddanske))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
print(sum(as.numeric(ukexp)))
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
old
totq
total
sum(total)
View(expense)
View(last)
expense <- expense[-1,]
food <- c("Fakta","Meny","Netto","Irma")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
print(sum(expe))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
print(sum(olddanske))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
print(sum(as.numeric(ukexp)))
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
total
old
sum(total)
sum(total) + 1929.58
3451.11+1265.55+374.12
3451.11+1265.55+374.12 +sum(old)
expense
rm(list = ls())
getwd()
setwd("R")
source("measure.R")
source("seed.R")
source("MiscFunctions.R")
source("loading.R")
.singleElememntPos <- function(data){
rows<- nrow(data)
if(rows<=2){
return(TRUE)
} else{
return(FALSE)
}
}
.nonZeroIndex <- function(data,threshold=5){
## first let's remove artifacts
area <- data[,2]
area <- which(area >= threshold)
return(data[area,])
}
## the is.true function is a didgy and hacky
## it only return true if what ever you pass is true otherwise just FALSE
## even if it is numeric, character or what ever
.is.true<-function(x){
if(x==TRUE){
return(TRUE)
} else {
return(FALSE)
}
}
.is.false<-function(x){
if(x==FALSE){
return(TRUE)
} else {
return(FALSE)
}
}
dats <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/"
maps <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/map_ID/"
test <- sowSeed(dats, maps)
source("ExportAndFormat.R")
test <- sowSeed(dats, maps)
roots
class(roots)
length(roots@Image)
length(roots@Zone)
t <- new("roots")
t
length(t@Image)
length(t@Image)
source("MiscFunctions.R")
source("seed.R")
test <- sowSeed(dats, maps)
source("seed.R")
test <- sowSeed(dats, maps)
test@meta.data
names(test@meta.data)
names(test@meta.data@ZoneError)
names(test@meta.data$ZoneError)
test@meta.data$ZoneError
source("MiscFunctions.R")
source("seed.R")
test <- sowSeed(dats, maps)
Zone
str(roots@Zone)
names(roots@Zone)
names(roots@Zone[Zone])
source("MiscFunctions.R")
test <- sowSeed(dats, maps)
test@meta.data
test
source("show.R")
test <- sowSeed(dats, maps)
test
source("show.R")
test <- sowSeed(dats, maps)
test
source("show.R")
test
source("show.R")
test
source("show.R")
test
source("show.R")
test
length(test@measures)
length(test@measures)
test@measures
test@meta.data
source("show.R")
test
source("show.R")
test
source("show.R")
test
roots <- seed@roots@Zone
roots <- test@roots@Zone
names(roots)
d <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/080519_plate1_AllImages_ImageData.csv"
m <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/map_ID/080519_plate1_mapID.csv"
test2<- sowSeed(d,m,type="zone")
test2<- sowSeed(d,m,type="zone")
source("loading.R")
test2<- sowSeed(d,m,type="zone")
str(data)
test2<- sowSeed(d,m,type="image")
test2
m
d
test2@meta.data
d <- "/Users/rwk115/Documents/NPQAnalysis/NPQTemp/input_data/080519_plate1_AllImages_ZoneData.csv"
test2<- sowSeed(d,m,type="image")
test2<- sowSeed(d,m,type="zone")
source("loading.R")
test2<- sowSeed(d,m,type="zone")
test2@meta.data
source("loading.R")
test2<- sowSeed(d,m,type="zone")
data
mapID
.ZoneDataLoading(file =data,mapID=mapID,
threshold =areaThreshold)
.ZoneDataLoading(file =data,mapID=mapID,
threshold =areaThreshold) ->t
t
str(t)
source("loading.R")
test2<- sowSeed(d,m,type="zone")
test2
test2@meta.data
source("measure.R")
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
str(measure)
names(measure)
names(measure[[1]])
measure2 <- lightResponse(test2)
measure2
str(measure2)
names(measure2)
measure2
class(measure2)
View(measure2)
colnames(measure2)
measure2$NPQ
is(measure2)
source("measure.R")
measure2 <- lightResponse(test2)
source("measure.R")
measure2 <- lightResponse(test2)
source("measure.R")
measure2 <- lightResponse(test2)
measure2
names(measure2)
str(measure)
str(measure2)
names(measure2)
names(measure)
source("measure.R")
measure2 <- lightResponse(test2)
measure2
names(measure2)
source("measure.R")
source("measure.R")
measure2 <- lightResponse(test2)
source("measure.R")
measure2 <- lightResponse(test2)
measure2
names(measure2)
names(measure2[[1]])
measure2 <- lightResponse(test2, measures = c("NPQ","XE"))
measure2
names(measure2)
names(measure2[[1]])
source("measure.R")
measure2 <- lightResponse(test2, measures = c("NPQ","XE"))
measure2 <- lightResponse(test2)
measure2 <- lightResponse(test2, measures = c("NPQ","hh"))
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
measure
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
data
str(data)
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
warnings()
source("measure.R")
measure <- lightResponse(test)
measure
source("measure.R")
measure <- lightResponse(test)
datasubSplit
names(datasubSplit)
ID
measure <- list(datasubSplit)
names(measure) <- ID
source("measure.R")
measure <- lightResponse(test)
measure2 <- lightResponse(test2)
names(measure)
names(measures)
names(measure2)
source("seed.R")
source("loading.R")
source("MiscFunctions.R")
source("show.R")
test <- sowSeed(dats,maps)
source("MiscFunctions.R")
test <- sowSeed(dats,maps)
test
test <- sowSeed(dats,maps)
source("MiscFunctions.R")
test <- sowSeed(dats,maps)
plateError
Image
Zone
table(Zone)
source("MiscFunctions.R")
test <- sowSeed(dats,maps)
test
test@meta.data
test <- sowSeed(dats,maps,type="zone")
test
test@meta.data
source("measure.R")
test <- sowSeed(dats,maps,type="zone")
measure <- lightResponse(test)
names(measure)
lapply(measure, class)
lapply(measure, dim)
head(measure[[1]])
measure[[1]][,1:2]
measure[[1]][1:2,1:2]
t <- new("measure")
t <- new("measures")
t
getSlots(t)
slotNames(t)
source("measure.R")
measure <- lightResponse(test)
ls()
NPQ
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
measure
source("measure.R")
measure <- lightResponse(test)
measure
class(measure)
source("measure.R")
measure <- lightResponse(test)
ls()
str(NPQ)
source("measure.R")
source("seed.R")
measure <- lightResponse(test)
measure
measure@NPQ
source("measure.R")
measure <- lightResponse(test)
measure
class(measure)
measure <- lightResponse(test)
source("seed.R")
source("measure.R")
measure <- lightResponse(test)
source("measure.R")
measure <- lightResponse(test)
class(lightResp)
class(seed)
slotNames(seed)
seed@measures <- lightResp
seed
slotNames(seed@measures)
slotNames(test@measures)
source("MiscFunctions.R")
source("show.R")
measure <- lightResponse(test)
source("measure.R")
measure
source("measure.R")
measure <- lightResponse(test)
measure
source("show.R")
measure
measures
source("show.R")
measure
seed <- sowSeed(dats, maps)
seed
light <- lightResponse(seed)
light
smallseed <- sowSeed(d,m,type="zone")
smalllight <- lightResponse(smallseed)
smallseed
smalllight
expense <- read.csv("~/Downloads/DanskeKonto-4043192760-20200514.csv", stringsAsFactors = F)
last <- read.csv("~/Downloads/DanskeKonto-4043192760-20200406.csv", stringsAsFactors = F)
uk <- read.csv("~/Desktop/expenditure_2020.csv", stringsAsFactors = F, header = F)
food <- c("Fakta","Meny","Netto","Irma")
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
print(sum(expe))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
print(sum(olddanske))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
print(sum(as.numeric(ukexp)))
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
total
sum(total)
expense <- expense[-1,]
total <- c()
old <- c()
for(i in food){
expe <- abs(as.numeric(expense[grep(i,expense$Text, ignore.case =TRUE),"Amount"]))
print(sum(expe))
olddanske <-abs(as.numeric(last[grep(i,last$Text, ignore.case =TRUE),"Amount"]))
print(sum(olddanske))
ukexp <- uk[grep(i,uk$V4, ignore.case = TRUE),"V6"]
ukexp <- gsub("\\(£","",ukexp)
ukexp <- gsub("\\)", "", ukexp)
print(sum(as.numeric(ukexp)))
total <- c(total,sum(expe))
old <-c(old, sum(sum(olddanske),sum(as.numeric(ukexp))))
}
sum(total)
sum(total) +1929.58
(sum(total) +1929.58)/2
(sum(total) +1929.58)/2 ->t
t-1929.58
